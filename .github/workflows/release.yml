on:
  release:
    types: [ created ]

env:
  PROJECT_NAME: open-folder

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"
      - name: Setup Cache
        uses: Swatinem/rust-cache@v2
      - name: Build Binary
        run: cargo build --verbose --release --target ${{ matrix.target }}
      - name: Prepare Binary for Release
        shell: bash
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi
          BIN_PATH="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"
          if [ -f "$BIN_PATH" ]; then
            echo "Binary found at $BIN_PATH"
            if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
              ARCHIVE_NAME="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}.zip"
              7z a $ARCHIVE_NAME "$BIN_PATH"
            else
              ARCHIVE_NAME="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}.tar.gz"
              tar -czvf $ARCHIVE_NAME "$BIN_PATH"
            fi
            echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
          else
            echo "Error: Binary not found at $BIN_PATH"
            exit 1
          fi
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/octet-stream
